!!! 기본에 충실해라 !!!
[자바스크립트 - Javascript]

--------------------------------------------------------------------------------------------------------------------
|10/05|

자바스크립트란?

1. 웹 브라우저에서 읽고 실행되는 언어
2. 보안성이 없음
3. html 내에서 작성
4. 대소문자의 구분이 엄격함(aaa ≠ AAA) << 실제 코드를 짜면서 주의해야 하는 사항
  - HTML은 대소문자 구분 안함
  - CSS의 경우는 보통의 경우에는 안하지만 엘리먼트 네임(클래스명)의 경우는 구분한다.
  - JAVASCRIP의 경우는 모든 언어구성에 대소문자 구분이 필요하다.

 

* 적용 방법 *

1. 내부 스크립트
- HTML 문서 내에 스크립트 정의 후 직접 작성
  필요한 위치에
    <script type="text/javascript>
      스크립트 효과
    </script>

2. 외부 스크립트
- 스크립트 효과를 다른 문서에 작성하고 "파일명.js" 저장

- 효과를 적용할 문서에
  <script type="text/javascript" src="이름.js">
    다른 문장 작성 금지
  </script>


※ 스크립트는 내부나 외부나 큰 차이는 없지만 유일한 차이점을 뽑자면 "scr 유무"를 볼 수 있다.
※ CSS의 경우는 <head>태그 안에 선언해야하지만 script의 경우는 위치 상관없이 선언할 수 있다.


★ 스크립트가 작동 안될 때 확인법
- 개발자 도구에서 Console 항목에 들어가면 스크립트가 작동 안되는 사유를 보여준다.


---------------------------------------------

☞ 언어들의 문법구조

html < element attribute = "value"

css < selector {property : value}

js < object . property = "value"

document의 경우는 html로 비교해보자면 body에 해당

"."<< 언어구조의 조사에 해당 = ~을,를,이,가


document(body).write("이 문장을 출력합니다.");
= 바디에 이 문장을 출력해 줘.

HTML과 JAVASCRIPT의 공통점이라고 하면 선언 순서대로 한 줄씩 차례대로 실행된다.
차이점은 JAVASCRIPT는 연산능력을 가지고 있다.

---------------------------------------------

* 스크립트의 주석 *
1. // : 한 줄 주석
2. /* */ : 여러 줄 주석


document.write("이곳에는 html 태그를 사용할 수 있다. 단 몇개만 사용 가능");

Operator = 연산자

ECMAScirpt v6 = ES6


-----------------------------------------------------------------------


** 자료형(Data Type) : 연산에 사용되는 값의 종류 **

* 상수 : 값이 정해져 있는 형식

1)정수 : 정확하게 딱 맞아 떨어지는 숫자들.
- 음수(-), 소수(.)를 제외한 양의 실수
- 8진수, 16진수 포함

2)실수 : 모든 형태의 값
- 실제 사용 가능한 모든 수

정수와 실수 모두 숫자, Number Object

3) 문자형 상수(string)
- 일반적인 텍스트
- ""를 사용한다.

alert : 메세지
window.alert("") = 브라우저에 메세지를 띄워줘


4)불린(boolean)
 - true(1) / false(0)의 형식

5)null
 - 값이 없음


* 변수(variable) : 글자이지만 숫자일 수 있고 있었지만 없을 수도 있다.
1) 변할 수 있는 값

★2) 값을 "저장"하는 장소나 이름 >> a = 1 : 1을 a에 저장한다.

3) 변수 선언문
 - var : 변수 재선언 & 변수 재할당 가능, 생략 가능 ex) var abc
 - let : 변수에 재할당
 - const : 변수 재선언, 변수 재할당 불가능 

4) 선언과 동시에 값 입력 가능
    ex) var abc = 1
        
        var abc
        abc = 1

        var a, b, c
         a = 1
         b = 2
         c = 3
        
        var a=b=c=1

var 변수이름 = 값


** 이름 규칙 **
1. 알파벳, 숫자 사용 가능
2. 한글, 특수문자, 공백 사용 불가능(단 특수문자 중"_"는 사용 가능)
3. 첫번째 글자는 "_" 또는 알파벳만 가능
4. 대소문자 반드시 구분
5. 예약어 사용불가

변수의 이름만 봐도 용도를 파악할 수 있게.


-----------------------------------------------------------------------------------------------------------------

|10/06|

** 연산자 **

1. 산술 연산자

1) + : 더하거나 연결하거나
2) - : 빼거나 부호반전
3) * : 곱하거나 전체(all element) *.* : 모든 이름을 가진 모든 파일
4) /
5) % : 두개의 수를 "몫이 정수가 될때 까지" 나눈 나머지(순환식 로직)
   10 / 3 = 3.333334
   10 % 3 = 1

NaN = Not a Number

** 연결 연산자 **

1) + : 연산자의 좌변과 우변의 값이 산술 연산이 불가능한 경우 두 개의 값을 이어주는 연산자

  ex)1+2=3 >> 산술 연산이 가능하므로 "산술연산자"
     "a"+1=a1 >> 두개의 값을 연결하는 "연결연산자"

javascript : var score = "100"
             document.write(score + " POINT");
             -----> 100 POINT

php : $score = 100;
      echo $score." POINT";
      -----> 100 POINT

asp : response.write

C, Java : print(f)



** 비교 연산자 : 결과 값이 true / false 로 출력 **

1) >
2) <
3) == : "="는 저장의 의미, "=="는 비교의 의미
4) <=
5) =>
6) != : ! = not, 다르다(같지 않다)
   a == b
   a != b

\ "===" 도 쓸 수 있다. 좀 더 정확한 의미의 같다는 뜻\

a = "1"
a == 1 true / false
a === 1 false : 답도 같지만 형식도 같아야 한다.

== : same
!= : not same

연산자들을 같이 사용할 때에는 = 는 항상 뒤에 붙여쓴다.
문자 역시 크기 비교가 가능하고 사전 순으로 비교되고 뒤에 있는 경우가 더욱 큰 경우다


** 논리 연산자 : 좌변과 우변의 식을 검토하여 결과 산출 **

1) &&(and) : 좌변과 우변의 식이 모두 참인 경우에 참값 반환
2) ||(or) : 좌변과 우변의 식 중 하나라도 참이면 참값 반환
3) ^(Xor) : 좌변과 우변 중 하나만 참이 경우 참값 반환
4) !(not) : 반대 값 반환

* 비트식 연산자
논리 연산자와 같은 연산자 이지만 기호가 1개이고
값이 1(true), 0(false)로 출력



* 대입 연산자
1) "=" 기호가 들어간 연산식
2) 좌변과 우변에 동일식이 존재하는 경우 약식 가능

   ex) a = a + b -----------------> a +=b
       a = a - b -----------------> a -=b
       a = a * b -----------------> a *=b
       a = a / b -----------------> a /=b
       a = a % b -----------------> a %=b



** 증감 연산자 **

1) 변수의 값을 증가 또는 감소시키는 연산자
2) 연산기호 : ++, --
3) 증강 범위 : +-1
4) 선행처리(++a), 후행처리(a++)

    a = 100
      a++ : 100+1, 101+1, 102+1.....
      ++a : 101, 102, 103.....

      a-- : 100-1, 100-2, 100-3.....
      --a : 99, 98, 97.....

- 소수점은 불가능


* 조건연산자 : 조건의 결과에 따라 다른 값 출력
1) (조건)? 조건이 참일 경우 : 조건이 거짓인 경우


예시)var a, b ,rs1, rs2;

      a="수요일"
        
      rs1="오늘은 수요일 입니다."
      rs2="오늘은 수요일이 아닙니다."

      b = (a == "수요일")? rs1 : rs2;
      document.write("<h2>"+b+"</h2>")
      
      a="일요일"
        
        rs1="오늘은 수요일 입니다."
        rs2="오늘은 수요일이 아닙니다."
      
        b = (a == "수요일")? rs1 : rs2;



-----------------------------------------------------------------------------------------------------------------

|10/07|

** 제어문 **
해당 언어를 효율적으로 사용하기 위한 문장
1. 조건문
2. 반복문

** 반복문 **

1. 규칙적으로 실행되는 문장을 직접 작성하지 않고
여러번 실행 시키는 문장

2. for
3. while
4. do while


* while
1. 조건 + 반복문
2. while(조건){
      조건이 참인 동안 반복할 문장
    }

* for
1. 형식
    for(시작값; 최종값; 증감식){
      반복할 문장
    }

2. 시작값 선언 시 변수 선언과 동시에 사용 가능
ex) 일반적인 사용 예
    var a=1
        b=2
    for(a-1; a<=10; a++){
      document.write("무궁화 꽃이 피었습니다.")
    }

ex) for 문의 사용 예
  for(var a=1; a<=10; a++){}
  for(a=1; a<=10; a++){} // var 생략
  for(a=1, b=2; a<=10; a++){} //여러개의 변수 선언


3. 다중 반복문
  for(시작값; 최종값; 증감식){
    for(시작값; 최종값; 증감식){
      반복할 문장
    }
  }


-----------------------------------------------------------------------------------------------------------------

|10/08|

** 함수 **
미리 약속되어 있는 명령어

1. 내장 함수 - 만들어져 있는 명령어
2. 사용자의 정의 함수 - 만들어서 사용하는 명령어


* 내장 함수
1) 대화상자 함수
  - alert("문자열") : 메세지 상자
  - confirm("문자열") : 확인 / 취소 선택 상자
  - prompt("질문메세지", "초기메세지") : 사용자 입력 상자

* 조건문
1) 조건의 결과에 따라 다르게 문장을 실행
2) if 
3) switch

- if 문 -
조건이 참인 경우 다음 문장실행
1. if(조건) 조건이 참인 경우 실행할 문장

2. if문의 다수 사용 : 각각의 조건이 독립적

3. 중괄호 사용 : 여러 개의 문장을 하나의 조건문에 종속

4. if ~ else
  - if(조건){
    조건이 참인 경우 실행할 문장
  }else{ // if의 조건이 참이 아닌 나머지 모두
  
  }

  참이면 if에 있는것 거짓이면 else 안에 있는 조건문을 실행한다.


5. if ~ else if
- if(조건1){
  조건 1이 참인 경우 실행할 문장
} else if(조건2){
  조건1이 참이 아니고 조건2가 참인 경우 실행할 문장
}


6. if~else if~else
- if(조건1){
  조건1이 참인 경우 실행할 문장
} else if(조건2){
  조건1이 참이 아니고 조건 2가 참인 경우 실행할 문장
} else{
  조건 1과 조건 2가 참이 아닌 경우 실행할 문장
}

- switch 문 -

switch(변수){
  case "값1" : 변수 값이 "값1"인 경우 실행할 문장
          break;
  case "값1" : 변수 값이 "값1"인 경우 실행할 문장
          break;
  case "값1" : 변수 값이 "값1"인 경우 실행할 문장
          break;
  default : 변수 값이 "값1", "값2", "값3"이 아닌 경우 실행할 수 있다.
  }

-----------------------------------------------------------------------------------------------------------------

|10/12|

** 사용자 정의 함수 **
1. 사용자가 임의로 생성한 함수
2. 선언문 : function - 명령어를 만드는 명령어
3. function 함수명(매개변수, 매개변수...){
    실행문
    실행문
    .
    .
    .
}

4. 호출 시에만 실행
5. 사용자 정의 함수 호출방법
      - 단독 실행
      - 변수에 의한 실행
      - 다른 함수에 의한 실행
      - 이벤트에 의한 실행(*******)
6. 함수명 규칙 : 변수명 규칙과 동일

§ 이벤트 §
1) 언제
2) 이벤트 : 상황, ~~하다
3) 이벤트 핸들러 : 이벤트 사용, ~~했을 때, 이벤트 앞에 on 추가
  
- 이벤트 -
  load                 
  unload
  mouseover
  mouseout
  focus
  blur
  click
  mousedown
  mouseup

- 이벤트 핸들러(트리거) -
  onload                 
  onunload
  onmouseover
  onmouseout
  onfocus
  onblur
  onclick
  onmousedown
  onmouseup

자바스크립트의 시간 단위는 1000/1초

자바스크립트의 \n은 html의 <br>과 같은 개념
\n = <br>

aaa() << 뒤에 괄호가 붙어있으면 무조건 명령어

-----------------------------------------------------------------------------------------------------------------

|10/13|

** DOM(Document Object Model) 방식 **
- html 요소에 접근하는 표준화된 방식
- 기존 name 속성과 태그별 접근 방식에서 벗어나 오브젝트의 종류에 상관 없이 
  id 속성을 사용하여 요소에 접근하는 방식

*getElementById("요소")객체의 생성


- 자바스크립트 - 
1) 표준 모델 : ECMAScript 6(ES6)
2) 라이브러리 : 파일 형태로 제공되는 완성된 효과
- jquery.js
- angular.js

3) 서버 관련 스크립트
- node.js

4) 프레임워크
- react.js
- phython
- vue.js
- angular.js

5) 동작 방식
- ajax : 비동기식 스크립트
- DOM : HTML 요소 선택

DOM(Document(html 문서) Object(html 문서 안에 있는 태그) Model(관계))

*javascript를 body 위에서 실행하고 싶은 경우 *

- window.onload = function(){
    ~~~실행문
    ~~~실행문
    ~~~실행문
    ~~~실행문
};

-----------------------------------------------------------------------------------------------------------------

|10/21|

** DOM(Document Object Model) 방식 **
- html 요소에 접근하는 표준화댄 방식
- 기존 name 속성과 태그별 접근 방식에서 벗어나
 오브젝트의 종류에 상관없이 id 속성을 사용하여
 요소에 접근하는 방식

 * getElementById("요소")객체의 생성

 * DOM 코어 / HTML-DOM : HTML 요소들의 속성 제어
   DOM 코어 : 스크립트가 지원되는 모든 기기에서 사용
   ex) object.getAttribute("src")

   HTML-DOM : 웹 브라우저에서만 사용 가능
   ex) object.src